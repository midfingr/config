var g_db=null,g_ff_db=null;
function opendb(){try{if(getBG().g_db_transaction_tested&&!getBG().g_db_transaction_worked)return null;if(null!=g_db)return g_db;if(window.openDatabase)(g_db=openDatabase("lp","1.0","LastPass Local Database",2E5))||console_log("opendb: Failed to open database!");else if(g_isfirefoxsdk&&"undefined"!=typeof g_chrome){var b={LastPassPreferences:["id","username_hash","prefname","prefvalue"],LastPassSavedLogins2:["username","password","last_login","protected"],LastPassSavedLogins:["username","password",
"last_login"],LastPassData:["id","username_hash","type","data"]},a=g_chrome.Cu.import("resource://gre/modules/FileUtils.jsm").FileUtils.getFile("ProfD",["lp.sqlite"]);g_ff_db=g_chrome.Cu.import("resource://gre/modules/Services.jsm").Services.storage.openDatabase(a);g_db={transaction:function(a){a({executeSql:function(a,d,c,f){var h=this,k=null;try{for(var l={},e=0;e<d.length;e++){var m=a.indexOf("?");-1!=m&&(a=a.substring(0,m)+":param"+e+a.substring(m+1),l["param"+e]=d[e])}k=g_ff_db.createAsyncStatement(a);
for(e in l)k.params[e]=l[e];var j=[];for(e in b)if(-1!=a.indexOf(e)){j=b[e];break}var n={rows:{length:0,arr:[],item:function(a){return this.arr[a]}}};k.executeAsync({handleResult:function(a){try{for(;row=a.getNextRow();){var b={},d;for(d in j)b[j[d]]=row.getResultByName(j[d]);n.rows.arr.push(b);n.rows.length++}}catch(c){f&&f(h,c)}},handleError:function(a){f&&f(h,a)},handleCompletion:function(a){a!=g_chrome.Ci.mozIStorageStatementCallback.REASON_FINISHED?f&&f(h,a):c&&c(h,n)}})}catch(q){f&&f(h,q)}}})}}}else console_log("opendb: open database is not available!")}catch(c){console_log("opendb: Caught exception while opening database: "+
c.message)}return g_db}function createDataTable(b){b&&b.transaction(function(a){a.executeSql("CREATE TABLE IF NOT EXISTS LastPassData(id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, username_hash varchar(255), type varchar(20), data TEXT, CONSTRAINT usertype UNIQUE (username_hash, type))",[],function(){},function(a,b){console_log("createDataTable"+b)})})}
function createSavedLoginsTable(b){b&&(b.transaction(function(a){a.executeSql("CREATE TABLE IF NOT EXISTS LastPassSavedLogins(username varchar(255) PRIMARY KEY, password varchar(255), last_login datetime)",[],function(){},function(a,b){console_log("createSavedLoginsTable1"+b);alert("executeSQL access is broken. Safari has a bug with Private Browsing that causes this issue.  Restarting Safari typically fixes it. Error: "+b.message+"\nCode: "+b.code)})}),b.transaction(function(a){a.executeSql("CREATE TABLE IF NOT EXISTS LastPassSavedLogins2(username varchar(255) PRIMARY KEY, password text, last_login datetime, protected tinyint(1))",
[],function(){},function(a,b){console_log("createSavedLoginsTable2"+b)})}),b.transaction(function(a){a.executeSql("SELECT * FROM LastPassSavedLogins order by last_login desc",[],function(a,b){for(var g=0;g<b.rows.length;g++){var p=b.rows.item(g).username;a.executeSql("REPLACE INTO LastPassSavedLogins2 (username, password, last_login) VALUES(?, ?, ?)",[p,b.rows.item(g).password,b.rows.item(g).last_login],function(){},function(a,b){console_log(b)});a.executeSql("DELETE FROM LastPassSavedLogins",[],
function(){},function(a,b){console_log(b)})}},function(a,b){console_log("createSavedLoginsTable6"+b)})}))}
function lpSaveData(b,a){if(lpdisableoffline&&("key"==a||"accts"==a))console_log("db.js : lpSaveData : returning A");else if(null==g_username||""==g_username)console_log("db.js : lpSaveData : returning B");else if(""==b&&LPISLOC&&("key"==a||"accts"==a))console_log("db.js : lpSaveData : returning C");else{var c=opendb();createDataTable(c);c?c.transaction(function(d){console_log("db.js : lpSaveData : writing data : type="+a);d.executeSql("REPLACE INTO LastPassData (username_hash, type, data) VALUES (?, ?, ?)",
[db_prepend(g_username_hash),a,b],function(){console_log("db.js : lpSaveData : success : type="+a)},function(b,a){console_log("db.js : lpSaveData : failed error="+a)})}):console_log("server.js : lpSaveData : returning D")}}
function createPrefsTable(b){b&&b.transaction(function(a){a.executeSql("CREATE TABLE IF NOT EXISTS LastPassPreferences (id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, username_hash varchar(255), prefname varchar(255), prefvalue varchar(255), CONSTRAINT userkey UNIQUE (username_hash, prefname))",[],function(){},function(a,b){console_log("createPrefsTable: "+b)})})}
function deletesavedpw(){var b=opendb();createSavedLoginsTable(b);b&&b.transaction(function(b){b.executeSql("UPDATE LastPassSavedLogins2 SET password = '' WHERE username = ?",[g_username],function(){g_master_password_saved=!1},function(b,a){console_log("deletesavedpw:"+a)})})}
function protect_data(b,a,c,d){b.length?a&&!g_is_win?d(b):is_chrome_portable()?d(b):(a="",(""!=b||g_is_mac)&&have_binary_function("protect_data")?call_binary_function("protect_data",b,c,function(a){"string"!=typeof a&&(a="");""==a&&(a=b);d(a)}):(""==a&&(a=b),d(a))):d(b)}
function unprotect_data(b,a,c){"undefined"==typeof b?c(null):b.length?a&&!g_is_win?c(b):is_chrome_portable()?c(b):(a="",""!=b&&have_binary_function("unprotect_data")?call_binary_function("unprotect_data",b,function(a){"string"!=typeof a&&(a="");a==b&&(a="");c(a)}):(a==b&&(a=""),c(a))):c(b)}
function set_default_login_username(b){var a=opendb();createSavedLoginsTable(a);a&&a.transaction(function(a){var d=(new Date).getTime();a.executeSql("INSERT OR IGNORE INTO LastPassSavedLogins2 (username, password, last_login) VALUES (?, '', ?)",[b,d],function(a){a.executeSql("UPDATE LastPassSavedLogins2 SET last_login = ? WHERE username = ?",[d,b])},function(a,b){console_log(b)})})};
